# Accept the Go version for the image to be set as a build argument.
# Default to Go 1.11
ARG GO_VERSION=1.11

# First stage: build the executable.
FROM golang:${GO_VERSION} AS builder

# Set the working directory outside $GOPATH to enable the support for modules.
WORKDIR /src

# Set the environment variables for the go command:
# * CGO_ENABLED=0 to build a statically-linked executable
# * GOFLAGS=-mod=vendor to force `go build` to look into the `/vendor` folder.
ENV CGO_ENABLED=0 GOPATH="/src/deps"

# pre download the dependent modules
RUN go get -u github.com/golang/protobuf/proto
RUN go get -u github.com/golang/protobuf/protoc-gen-go
RUN git clone https://github.com/grpc/grpc-go.git $GOPATH/src/google.golang.org/grpc
RUN git clone https://github.com/golang/net.git $GOPATH/src/golang.org/x/net
RUN git clone https://github.com/golang/text.git $GOPATH/src/golang.org/x/text
RUN git clone https://github.com/golang/sys.git $GOPATH/src/golang.org/x/sys
RUN git clone https://github.com/google/go-genproto.git $GOPATH/src/google.golang.org/genproto
RUN cd $GOPATH/src/    
RUN go install google.golang.org/grpc

# Fetch dependencies first; they are less susceptible to change on every build
# and will therefore be cached for speeding up the next build
COPY ./go.mod ./go.sum ./
RUN go mod download

# Import the code from the context.
COPY ./ ./

# Build the executable to `/app`. Mark the build as statically linked.
RUN go build \
    -installsuffix 'static' \
    -o /app .

# Final stage: the running container.
FROM scratch AS final

# Import the compiled executable from the first stage.
COPY --from=builder /app /app

# Declare the port on which the webserver will be exposed.
# As we're going to run the executable as an unprivileged user, we can't bind
# to ports below 1024.
EXPOSE 8866

# Run the compiled binary.
ENTRYPOINT ["/app", "-log", "output.log"]