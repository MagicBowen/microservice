version: '3'

networks:
  microservices:
    driver: bridge

services:
  api-gateway:
    image: traefik
    container_name: api-gateway
    ports:
      - "80:80"         # The HTTP port
      - "8080:8080"     # The Web UI (enabled by --api)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $PWD/traefik/traefik.toml:/etc/traefik/traefik.toml
      - $PWD/traefik/rules.toml:/etc/traefik/rules.toml
      # - $PWD/traefik/access.txt:/etc/traefik/log/access.txt
    networks: 
      - microservices
    depends_on:
      - jaeger-agent

  http-service:
    build:
      context: ./services/http-service
    image: http-service:1.0.0
    expose:
      - "8866"
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.entryPoints=web"
      - "traefik.frontend.rule=PathPrefixStrip:/api/"
    environment:
      JAEGER_AGENT_HOST: jaeger-agent
      JAEGER_AGENT_PORT: 6831 
    links:
      - jaeger-agent
    depends_on:
      - api-gateway
      - entity-service
      - jaeger-agent
    networks: 
      - microservices

  entity-service:
    build:
      context: ./services/entity-service
    image: entity-service:1.0.0
    depends_on:
      - mongodb
      - redis
    expose:
      - "8899"
    environment:
      JAEGER_AGENT_HOST: jaeger-agent
      JAEGER_AGENT_PORT: 6831 
    links:
      - jaeger-agent      
    networks:
      - microservices

  mongodb:
    image: mongo
    container_name: mongodb
    expose:
      - "27017"
    volumes:
      - $PWD/mongo/data/db:/data/db
    networks: 
      - microservices

  redis:
    image: redis
    container_name: redis
    expose:
      - "6379"
    volumes:
      - $PWD/redis/data:/data
    entrypoint:
      - redis-server
      - --appendonly
      - "yes"
    networks: 
      - microservices 

  etcd1:
    image: quay.io/coreos/etcd
    container_name: etcd1
    command: etcd -name etcd1 -advertise-client-urls http://0.0.0.0:2379 -listen-client-urls http://0.0.0.0:2379 -listen-peer-urls http://0.0.0.0:2380 -initial-cluster-token etcd-cluster -initial-cluster "etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380" -initial-cluster-state new
    ports:
      - 2379
      - 2380
    environment:
      LOGSPOUT: ignore            
    networks:
      - microservices
  etcd2:
    image: quay.io/coreos/etcd
    container_name: etcd2
    command: etcd -name etcd2 -advertise-client-urls http://0.0.0.0:2379 -listen-client-urls http://0.0.0.0:2379 -listen-peer-urls http://0.0.0.0:2380 -initial-cluster-token etcd-cluster -initial-cluster "etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380" -initial-cluster-state new
    ports:
      - 2379
      - 2380
    environment:
      LOGSPOUT: ignore            
    networks:
      - microservices
  etcd3:
    image: quay.io/coreos/etcd
    container_name: etcd3
    command: etcd -name etcd3 -advertise-client-urls http://0.0.0.0:2379 -listen-client-urls http://0.0.0.0:2379 -listen-peer-urls http://0.0.0.0:2380 -initial-cluster-token etcd-cluster -initial-cluster "etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380" -initial-cluster-state new
    ports:
      - 2379
      - 2380
    environment:
      LOGSPOUT: ignore      
    networks:
      - microservices

  elasticsearch:
    build:
      context: ./elastic/elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./elastic/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      LOGSPOUT: ignore
    networks:
      - microservices

  logstash:
    build:
      context: ./elastic/logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./elastic/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./elastic/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5000:5000/udp"
      - "5000:5000/tcp"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
      LOGSPOUT: ignore
    networks:
      - microservices
    depends_on:
      - elasticsearch

  logspout:
    image: bekt/logspout-logstash
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      ROUTE_URIS: logstash://logstash:5000
      DEBUG: 1
      LOGSPOUT: ignore
    ports:
      - "8090:80"
    networks:
      - microservices
    depends_on:
      - logstash

  kibana:
    build:
      context: ./elastic/kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./elastic/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    ports:
      - "5601:5601"
    environment:
      LOGSPOUT: ignore      
    networks:
      - microservices
    depends_on:
      - elasticsearch

  jaeger-collector:
    image: jaegertracing/jaeger-collector:1.11
    environment:
      SPAN_STORAGE_TYPE: elasticsearch
      ES_SERVER_URLS: http://elasticsearch:9200
      ES_USERNAME: elastic
      ES_PASSWORD: changeme
      LOGSPOUT: ignore      
    networks:
      - microservices
    depends_on:
      - elasticsearch

  jaeger-ui:
    image: jaegertracing/jaeger-query:1.11
    ports:
      - "16686:16686"
      - "16687:16687"   
    environment:
      SPAN_STORAGE_TYPE: elasticsearch
      ES_SERVER_URLS: http://elasticsearch:9200
      ES_USERNAME: elastic
      ES_PASSWORD: changeme     
      LOGSPOUT: ignore       
    command: --es.username elastic --es.password changeme
    networks:
      - microservices
    depends_on:
      - elasticsearch
      
  jaeger-agent:
    image: jaegertracing/jaeger-agent:1.11
    command: --reporter.grpc.host-port=jaeger-collector:14250
    networks:
      - microservices
    environment:
      LOGSPOUT: ignore  
    depends_on:
      - jaeger-collector
      
  jaeger-dependence:
    image: jaegertracing/spark-dependencies
    networks:
      - microservices
    environment:
      STORAGE: elasticsearch
      ES_NODES: http://elasticsearch:9200
      ES_USERNAME: elastic
      ES_PASSWORD: changeme 
      LOGSPOUT: ignore            
    depends_on:
      - elasticsearch

  prometheus:
    image: prom/prometheus:v2.1.0
    volumes:
      - ./prometheus/prometheus/config:/etc/prometheus/
      - ./prometheus/prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    environment:
      LOGSPOUT: ignore        
    networks:
      - microservices    

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./prometheus/alertmanager/:/etc/alertmanager/
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'  
    environment:
      LOGSPOUT: ignore        
    networks:
      - microservices

  redis-exporter:
    image: oliver006/redis_exporter
    expose:
      - "9121"
    environment:
      LOGSPOUT: ignore  
      REDIS_ADDR: redis:6379
    networks: 
      - microservices       

  mongo-exporter:
    image: ssalaues/mongodb-exporter
    expose:
      - "9216"
    environment:
      LOGSPOUT: ignore  
      MONGODB_URI: mongodb://mongodb:27017
    networks: 
      - microservices       

  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000
    env_file:
      - ./grafana/config.monitoring
    environment:
      LOGSPOUT: ignore        
    networks:
      - microservices


