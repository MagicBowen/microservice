version: '3'

networks:
  microservices:
    driver: bridge

services:
  api-gateway:
    image: traefik
    container_name: api-gateway
    ports:
      - "80:80"         # The HTTP port
      - "8080:8080"     # The Web UI (enabled by --api)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $PWD/traefik/traefik.toml:/etc/traefik/traefik.toml
      - $PWD/traefik/rules.toml:/etc/traefik/rules.toml
      # - $PWD/traefik/access.txt:/etc/traefik/log/access.txt
    networks: 
      - microservices

  http-service:
    build:
      context: ./services/http-service
    image: http-service:1.0.0
    depends_on:
      - api-gateway
      - redis
      - entity-service
    expose:
      - "8866"
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.entryPoints=web"
      - "traefik.frontend.rule=PathPrefixStrip:/api/"
    networks: 
      - microservices

  entity-service:
    build:
      context: ./services/entity-service
    image: entity-service:1.0.0
    depends_on:
      - mongodb
    expose:
      - "8899"
    networks:
      - microservices

  mongodb:
    image: mongo
    container_name: mongodb
    expose:
      - "27017"
    volumes:
      - $PWD/mongo/data/db:/data/db
    networks: 
      - microservices

  redis:
    image: redis
    container_name: redis
    expose:
      - "6379"
    volumes:
      - $PWD/redis/data:/data
    entrypoint:
      - redis-server
      - --appendonly
      - "yes"
    networks: 
      - microservices 

  etcd1:
    image: quay.io/coreos/etcd
    container_name: etcd1
    command: etcd -name etcd1 -advertise-client-urls http://0.0.0.0:2379 -listen-client-urls http://0.0.0.0:2379 -listen-peer-urls http://0.0.0.0:2380 -initial-cluster-token etcd-cluster -initial-cluster "etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380" -initial-cluster-state new
    ports:
      - 2379
      - 2380
    networks:
      - microservices
  etcd2:
    image: quay.io/coreos/etcd
    container_name: etcd2
    command: etcd -name etcd2 -advertise-client-urls http://0.0.0.0:2379 -listen-client-urls http://0.0.0.0:2379 -listen-peer-urls http://0.0.0.0:2380 -initial-cluster-token etcd-cluster -initial-cluster "etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380" -initial-cluster-state new
    ports:
      - 2379
      - 2380
    networks:
      - microservices
  etcd3:
    image: quay.io/coreos/etcd
    container_name: etcd3
    command: etcd -name etcd3 -advertise-client-urls http://0.0.0.0:2379 -listen-client-urls http://0.0.0.0:2379 -listen-peer-urls http://0.0.0.0:2380 -initial-cluster-token etcd-cluster -initial-cluster "etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380" -initial-cluster-state new
    ports:
      - 2379
      - 2380
    networks:
      - microservices

  elasticsearch:
    build:
      context: ./elastic/elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./elastic/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      LOGSPOUT: ignore        
    networks:
      - microservices

  logstash:
    build:
      context: ./elastic/logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./elastic/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./elastic/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5000:5000/udp"
      - "5000:5000/tcp"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
      LOGSPOUT: ignore
    networks:
      - microservices
    depends_on:
      - elasticsearch

  logspout:
    image: bekt/logspout-logstash
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      ROUTE_URIS: logstash://logstash:5000
      DEBUG: 1
      LOGSPOUT: ignore
    ports:
      - "8090:80"
    networks:
      - microservices
    depends_on:
      - logstash

  kibana:
    build:
      context: ./elastic/kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./elastic/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    ports:
      - "5601:5601"
    environment:
      LOGSPOUT: ignore      
    networks:
      - microservices
    depends_on:
      - elasticsearch
